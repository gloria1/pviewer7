<Window x:Class="pviewer5.TestDataGrid"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:pviewer5"
        mc:Ignorable="d"
        Title="TestDataGrid" Height="816.293" Width="539.787">
    <Window.Resources>
<!--        <Style x:Key="FocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>
        <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
        <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD"/>
        <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
        <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
        <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
        <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
        <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
        <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>
        <Style x:Key="ButtonStyle1" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true" Margin="0,0,2,11">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="Stretch" Margin="3,-1,-1,-1" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Stretch" Height="Auto" Width="Auto"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <DataTemplate DataType="{x:Type local:Packet}">
            <WrapPanel Orientation="Horizontal" Margin="-1" Width="200" Background="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"  >
                <Label Content="{Binding SrcIP4}" Margin="3" Padding="1" FontSize="10"/>
                <Label Content="{Binding Protocolsg}" Margin="3" Padding="1" FontSize="10"/>
                <Label Content="{Binding PGTypeg}" Margin="3" Padding="1" FontSize="10"/>
            </WrapPanel>
        </DataTemplate>
        <DataTemplate DataType="{x:Type local:tdggroupingaxis}">
            <WrapPanel Orientation="Horizontal" Margin="-1" Width="300" Background="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"  >
                <CheckBox x:Name="checkBox" IsChecked="{Binding ischecked}" Margin="3" Click="tdgaxischeck_Click"/>
                <Button x:Name="button_top"  Content="Top" Margin="3" Padding="0" FontSize="10" Click="tdgaxisbutton_Click"/>
                <Button x:Name="button_up"   Content="Up"  Margin="3" Padding="0" FontSize="10" Click="tdgaxisbutton_Click"/>
                <Button x:Name="button_dn"   Content="Dn"  Margin="3" Padding="0" FontSize="10" Click="tdgaxisbutton_Click"/>
                <Button x:Name="button_bot"  Content="Bot" Margin="3" Padding="0" FontSize="10" Click="tdgaxisbutton_Click"/>
                <Label x:Name="label" Content="{Binding displayname}" Margin="3" Padding="1" FontSize="10"/>
            </WrapPanel>
        </DataTemplate>
        <HierarchicalDataTemplate DataType="{x:Type local:tdgnode}"
                                  ItemsSource="{Binding Path=L}">
            <StackPanel>
                <TextBlock x:Name="label" Text="{Binding displayinfo}" Margin="3" Padding="1" FontSize="10">
                    <TextBlock.ContextMenu>
                        <ContextMenu>
                            <MenuItem x:Name="tdg_break_out" Header="Break Out" Command="{x:Static local:TestDataGrid.tdg_break_out_cmd}" CommandParameter="{Binding self}"/>
                            <MenuItem x:Name="tdg_group"     Header="Group"     Command="{x:Static local:TestDataGrid.tdg_group_cmd}"/>
                            <ContextMenu.CommandBindings>
                                <CommandBinding Command="{x:Static local:TestDataGrid.tdg_break_out_cmd}" Executed="tdg_break_out_Executed" CanExecute="tdg_break_out_CanExecute"/>
                                <CommandBinding Command="{x:Static local:TestDataGrid.tdg_group_cmd}"     Executed="tdg_group_Executed"     CanExecute="tdg_group_CanExecute"/>
                            </ContextMenu.CommandBindings>
                        </ContextMenu>
                    </TextBlock.ContextMenu>
                </TextBlock>

            </StackPanel>

        </HierarchicalDataTemplate>
        <HierarchicalDataTemplate DataType="{x:Type local:tdgleaf}">
            <TreeViewItem Header="{Binding displayinfo}">
                <DataGrid
			        EnableColumnVirtualization="True"
			        EnableRowVirtualization="True"
			        VirtualizingPanel.IsVirtualizing="True"
			        VirtualizingPanel.VirtualizationMode="Recycling"
			        AutoGenerateColumns="False"
                    CanUserDeleteRows="False"
                    CanUserAddRows="False"
                    SelectionUnit="Cell"
                    SelectionMode="Single"
                    IsReadOnly="True"
                    ItemsSource="{Binding Path=L}">

                    <DataGrid.Columns>
                        <DataGridTextColumn Header="IP" Binding="{Binding SrcIP4}"/>
                        <DataGridTextColumn Header="Proto" Binding="{Binding ProtOuter}"/>
                        <DataGridTextColumn Header="GroupType" Binding="{Binding PGTypeg}"/>
                    </DataGrid.Columns>
                    <DataGrid.ContextMenu>
                        <ContextMenu>
                            <MenuItem x:Name="tdg_break_out" Header="Break Out" Command="{x:Static local:TestDataGrid.tdg_break_out_cmd}"/>
                            <MenuItem x:Name="tdg_group"     Header="Group"     Command="{x:Static local:TestDataGrid.tdg_group_cmd}"/>
                            <ContextMenu.CommandBindings>
                                <CommandBinding Command="{x:Static local:TestDataGrid.tdg_break_out_cmd}" Executed="tdg_break_out_Executed" CanExecute="tdg_break_out_CanExecute"/>
                                <CommandBinding Command="{x:Static local:TestDataGrid.tdg_group_cmd}"     Executed="tdg_group_Executed"     CanExecute="tdg_group_CanExecute"/>
                            </ContextMenu.CommandBindings>
                        </ContextMenu>
                    </DataGrid.ContextMenu>
                </DataGrid>
            </TreeViewItem>
        </HierarchicalDataTemplate>
        -->
    </Window.Resources>
<!--
    <Grid 
        Margin="0,74,0,0"
        x:Name="tdggrid">
        <Grid.RowDefinitions>
            <RowDefinition Height="10" MinHeight="10"></RowDefinition>
            <RowDefinition Height="150"></RowDefinition>
            <RowDefinition Height="*" MinHeight="150"></RowDefinition>
        </Grid.RowDefinitions>


        <ListBox
                Grid.Row="1"
                x:Name="groupaxislistview"
                ItemsSource="{Binding Path=axes}">
        </ListBox>
        

        <TreeView
            Grid.Row="2"
            x:Name="tdgtree"
            
            ItemsSource="{Binding Path=root}">
            <TreeView.ItemContainerStyle>
                <Style TargetType="TreeViewItem">
                    <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
                </Style>
            </TreeView.ItemContainerStyle>

        </TreeView>
            
    </Grid>
        -->
</Window>
