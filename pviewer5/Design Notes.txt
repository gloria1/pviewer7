


2017-07-18 coming back to it


THINKING ABOUT IT IN THE ABSTRACT WILL NOT GET MUCH FURTHER
NEED TO REVIEW EXISTING CODE AND GET IT WORKING (RIGHT CLICK SEEMS BROKEN)
THEN RE-WRITE TO CAPTURE THE CURRENT VIEW STATE AS SHOWN BELOW 
	NEED TO HAVE METHOD TO EXTRACT THIS TREE FROM CURRENT WPF VIEW
	METHOD TO MANIPULATE IT WHEN STATE CHANGES
	METHOD TO APPLY IT TO NEW WPF VIEW
NEED TO WORK THROUGH IMPLEMENTATION TO GET MY HEAD INSIDE THE PROBLEM, BE PREPARED TO SCRAP AND REWRITE



	use cases for the tool overall
		load one or more capture files
		append additional capture files and retain the view

		quickly filtering down to traffic of interest when you already know what to look for
		exploring a blob of traffic when you don't know what you are looking for
			this is where we want to, say, sort, change hierarchy, apply a filter, sort again, change hierarchy again, etc.
			want to retain tree state across changes, both those that narrow what is shown and those that broaden it
			"Cases for view change" below still seems to be the right list

		so, how do we represent the view state that we want to extract from the wpf view and re-apply?
			current view is:
				pvdo grouped - state: expanded?
					pvdo grouped - state: expanded?
						pvdo grouped - state: expanded?
						pvdo indiv - state: expanded?
						pvdo indiv - state: expanded?
					pvdo indiv - state: expanded?
						pvdo grouped - state: expanded?
						pvdo indiv - state: expanded?
						pvdo indiv - state: expanded?
					pvdo indiv - state: expanded?
						pvdo grouped - state: expanded?
						pvdo indiv - state: expanded?
						pvdo indiv - state: expanded?
				pvdo indiv - state: expanded?
					pvdo grouped - state: expanded?
						pvdo grouped - state: expanded?
						pvdo indiv - state: expanded?
						pvdo indiv - state: expanded?
					pvdo indiv - state: expanded?
						pvdo grouped - state: expanded?
						pvdo indiv - state: expanded?
						pvdo indiv - state: expanded?
					pvdo indiv - state: expanded?
						pvdo grouped - state: expanded?
						pvdo indiv - state: expanded?
						pvdo indiv - state: expanded?


	next steps

		next steps:

			tree nodes are unique tuples of (axis1, axis2, ...)
			before view change, collect all the tuples and their expansion state
			then apply the view change to the list
			refresh the wpf view
			apply expanded states to refreshed wpf view
			cases for view change:
				packet list changed (appended)
				packet list changed (a new one, old one gone - if want to keep a certain view while scanning across multiple packet sets)
				axis hierarchy order changed
				axis added to hierarchy
				axis deleted from hierarchy
				axis item moved into "other" item
				axis item broken out of "other" item





			WHAT IS THAT STATE?  A TUPLE OF (EXPANDED|COLLAPSED) ?
			IS THIS A DICTIONARY THAT CAN BE INDEXED BY TUPLE?
			apply the view change to the tuple dictionary
				adding an axis
				deleting an axis
				changing the order of axes



			stop overthinking and going for the ultimate design
			think about likely workflows and what kind of tree expansion behavior will be needed
			e.g., typical flow will be
				load full capture
				start filtering out known good
					scroll through traffic gropuped by one of ip, mac, or domain, sorted by volume or domain
					pick items to add to exclusion filter and apply the filter
					==> filter changes should leave expansion state unchanged 
					==> if need be, explicitly scan the whole tree before filtering, store the expanded state and re-apply after filter
					==> only need to handle case where filter adds/removes a whole node




			follow recipe in visual studio help page on "How to Group, Sort, Filter..."
				define CollectionViewSource etc.
				make tdgitem inherit frmo PVDisplayObject
				make the grouping objects inherit from PVDisplayObject

			IF USE DATAGRID, MAY MAKEUSE OF ROWDETAILS
			FOR PERFORMANCE, SEE ABOUT VIRTUALIZING WITH GROUPING, E.G., PAGE 654 IN PRO WPF
				apparently virtualization does not happen automatically when grouping
				need to make certain settings to enable


			first make view retain branch open/closed state when change
				==> try using PVDisplayObject for tdgitem
			transfer logic to main window
				identify all goruping axes
				Packet becomes like tdgitem
				xaml uses datagrid instead of treeview

			improve labeling in group headers
			make sure "OTHER" is always last in sort order (so it will always be at top or bottom of list)




		does it make sense to create template in window.resources for ip text box?  (and then others like it?)
		if so, re-vamp the templates already in mainwindow.xaml

		adapt test data grid to main packet view window
			port logic
			outline what all the grouping axes are
				packet group type
				packet group instance (i.e., members are all packets of one specific group)
				protocol
				srcip
				dstip
				"other ip"
			use existing filtering logic




2/16/2017 


grouping
	view is a datagrid, so we can click columns to change sort order, change column order, change width etc.
	each row will show either a single packet or a group of packets
		if it is a group, fields will either show the single value common to all, or a digest
			digest is a treeview inside a single cell (or something like it)
				single line view is value (count), value (count), .... showing values in decreasing order by count
				expanded view is list of value (count) in decreasing order
					can click on an item and say "ungroup", which will force view to be re-created 
	un-grouping select items
		each packet will have a "grouped_" property for each property that things can be grouped by
		e.g.,
			for srcip, there will be grouped_srcip
			datagrid will group by grouped_srcip
			grouped_srcip will be null by default
			user can choose an individual srcip and say "break out" - this will set grouped_srcip to its srcip
			datagrid will group by grouped_srcip
		in grouped datagrid
			when the group is "expanded" by the datagrid, user will get a list of broken out items plus a line for the ones still grouped
			when the group is "collapsed" by the datagrid, there will be only a single line with a count
		QUESTIONS
			1) IN DATAGRID, WHAT HAPPENS IF SORT HIERARCHY IS DIFFERENT THAN GROUPING HIERARCHY?
				1.1) DOES IT SORT FIRST, OR GROUP FIRST?
				1.2) IF IT SORTS FIRST, DO YOU GET MULTIPLE INSTANCES OF THE SAME GROUP ITEM IF THEY FALL IN DIFFERENT PARTS OF THE LIST BY SORT ORDER?
		DO AN EXPERIMENT - CREATE A SIMPLIFIED, STATIC EXAMPLE OF A LIST OF PACKETS AND RENDER IT IN A GROUPED, SORTED, DATAGRID
			







	
model	
	list of packets
	each packet has reference to parent group
		if packet is un-grouped, parent group will be set to null
	each group will have a property that describes it, uniquely (so can sort, filter, etc.)
	
	
viewmodel	
	sorting/grouping/filtering axes (some do not make sense for all three of these operations)
	   timestamp (sorting only)
	   packet count (sorting only)
	   groupfirsttime
	   grouplasttime
	   srcip, dstip, ip, srcmac, dstmac, mac
	   protocol
	   group type
	
	viewmodel has a sort order - list of grouping axes in order of priority
	
	each packet will have a view state, consisting of
	  hide (true/false)
	  vector of grouping axes, true/false for each one
	if hide==true, hide it
	else, group with adjacent packets in list that have same groupingaxis==true settings
	
	filtering and grouping rules encoded as regexes (?? will this work ?? how to do and/or ops in regex ??)



11/5/2016 - getting back into it
	directions
		design new ui for viewing/filtering captures
			group on several dimensions - group type (http, arp, etc), srcip, dstip, srcmac, dstmac, protocol, etc
			sort
			grouping levels on each dimension
				all combined
				itemized (and sorted)
				some itemized and rest in a combined bucket
		extend file open/append operations to handle large number of files that grows
			"load folder" command - one button load all files in a folder
			"reload folder" - loads all files again (including new files)
			"load new files" - scans folder for new files and appends those
			"append folder" - point to new folder and append it to what's already loaded
			progress indicator when opening files (antipicate opening 100's of files)
		add more protocols
			http
			https
			vpn
			whatever skype is using
			windows network stuff
		packet viewer - fix it up and extend
		view encrypted traffic (with help from mitm)







ADD TO LIBRARY:
	ITU DOCS FROM http://www.itu.int/rec/T-REC-X/en
	PKCS DOCS FROM http://www.rsa.com/rsalabs/node.asp?id=2124.
	any good and recent books on tls how-to and security
		need to learn how to parse tls sessions
		need to learn how to identify questionable activity

display
	highest level - tabs for different group types
	http tab
		datagrid with columns for
			characteristics to group and sort by
				srcip
				destip
				start time
				end time
				tls chars






strategy
	capture all traffic between router and gateway
	read through the raw traffic captures and catalog the traffic
		tls characteristics to catalog
			certificate chain - including which root ca is used
			oddly formed handshke messages - lots of fragments, or no unfragmented when they should be fragmented?
			ciphers chosen
			other aspects of a TLS session
			need to do research on different pathologies to look out for
	maintain a cumulative history over time, to observe longer-term averages, outliers, and changes over time
		outlier examples:  tls errors, fragmented ip packets, 
	maintain the raw captures for XXXX time
	IS THIS POSSIBLE????? capture TLS master secrets from, so raw traffic can be decrypted
		???? via ICAP and squid????
		???? via netfilter ?????
		????? via some other linux kernal callback interface?????



purposes of tool
	catalog all external ip traffic
		group packets into sessions of related activity
			view groups
			compile a digest of a set of packets loaded
				domains, addresses visited
				types of security
				exceptions and outliers
			store the digest and append with info from new captures loaded
	for ssl encrypted traffic, what can we see from the handshake?
		certificates, cipher suites, tls versions etc.
















	TO DO

		while loading, put up modal dialog box with status - scrolling text box of status messages
		relate names to cnames
		add timestamp and obsn counts to datagrid (filter on?)

		http processing steps
			group together with DNS messages based on the IP addrses of the traffic
			identify domain from DNS or from HTTP header?  maybe try both and flag if they disagree???
			see if domain name can be found in preceding HTTP traffic
				if so, group this http together with the parent http
				this "http traffic group" will be a tree, not just a list
			assemble TCP payloads into HTTP messages
			for messages that may contain domain names (html, javascript, json?)
				decode message
				keep available for searching 

		what to do about https?
			can i set up a proxy on the router, and capture from the un-encrypted traffic?



			
		add obsn times and counts as additional columns in datagrid
		time stamp passed to MergeItem not right?
		test load/save/merge
		reload last at startup


		TCP "Sequence failed" messages?



		next steps - not sure which order to pursue these

			2) are the IPDM table commands appropraite (add, delete row?  able to edit cells?)
			3) finish DNS database logic - use RDNS and ARIN to lookup info
			5) add logic to store filtered packet set
			6) use case is to 
				- read the set of cap files from sheraton recnetly (or some other)
				- set up a filter interactively
				- store the filtered set of packets in a new file





	ip-dn mapping
		data elements - list of idmtableitem
			ip
			domains - list of idmdomain
				domain name
				time first observed
				time last observed
				obtained from RDNS or from reading DNS packets?
				list of dns servers that provided this name
				other information TBD that is worth capturing

		operations
			rdns update
			"contribute ip" - method called by ip4 header constructor, to add the ip4 address to the table
			"contribute dns" - method called by dns header reader, to add its information
				IMPLEMENT BY TRACING DNS HEADER READING CODE
				DISCOVER VARIATIONS IN WHAT KINDS OF DNS INFO COMES IN
					WHILE AT HOME
					WHILE IN WORK NETWORK
					WHILE ON IPHONE NETWORK
			file merge - merges info within records
			scan for noteworthy situations
				situations to flag
					ip for a domain changes over time (don't know how much of an anomaly this is, but anomaly or not, i want to observe ip addresses changing.....)
					ip addresses with no known domain name (use RDNS either on background thread or trigggered manually)
		validator/converters
			add dns entries to ip tostringalts
			dlist
				main display is list of domains
				tooltip shows expanded info on each
				

		make gui highlight cases where multiple IPs for same domain
		also highlight cases where mutiple domains for same IP

		add ip-dns map info to IP4 tooltip display

		enable storage and retrieval of map - so it can grow over sessions





		augment displayinfo for DNSH
			what are the "typical" forms
				query
				"typical" answer - one line summary should just show the first IP4 returned
					start with simple definition of "normal" fingerprint, can add more as we observe
						"normal" seems to have these characteristics: (at least for traffic between a LAN client and the local DNS server on that LAN)
							two packets, one query, one response
							response RRs include only
								query packet, query section has only one RR
								response packet
									query section has only one RR
									answer section - A RRs and CNAME RRs
										CNAME records provide CNAME for name in prior RR
									ns authority section - zero or more NS RR, relating to the domain in the query
									additional records section - A or AAAA records for the nameservers in the ns auth section
				"unusual" - neither of the first two
		augment display info for DNSG - set exception levesl to flag unusual instances
			exception level 0 - typical group
				one query with one RR
				one answer that is "typical" (see above)
			exception level 1 - group with additional info
			exception level 2 - having patterns consistent with abuse (research what such patterns might be)




		dns
			enhancements
				additional info in DNSH pvdisplayinfo
					abbreviated info on packet sufficient to identify
					"usual" and ""unusual" packet sequences
						what is that?
							dns type (qustion or response)
							dns flags - recursion at least
							list of rr types
							no rrdata

				additional information in displayinfo for RRs
					type (number and name)
					class
					TTL
					RDATA - formatted accordingly for each type
				make filter for dns values i haven't leanred how to handle
					class other than internet


				throw dialog after packet file load if un-grocked dns records were loaded
					maintain a dictionary of <protocol, List<string>>
					header parsers can add exception info and pvdisplay info to list
					when file load done, open non-modal window if the dict is not empty
					dict window allows close and simple clear of the dictionary

					set some kind of "exception flag" that gets passed up the header parse stack
					and puts up a message box
				
				rdns crawler - read tcp/ip illustrated vol1, starting in section 11.5.6.4 (page 516)


			must also handle dns over tcp see rfc 5966
			set up dns server on windows?  or on pfsense?
				can it make outbound dns requests encrypted?
				can it make outbound dns requests go to some non-google, non-verizon server?



	datetime converters seem busted


			

	window layout
		next steps:
			save window divider state

			implement ip4<->dns map
			implement code to populate the dns map when reading packet files
			implement code to show domain names in place of ips (with check box for show domain, and databinding just like aliases)


	workflow
		scan files (one or multiple)
			select list of files
			for each file, parse headers far enough to get the ether, ip and dns information
				purpose is to 
					(1) build tabulation of 
							internal host | wan  host | protocol | packet count | byte count | ealiest time | latest time
								do this by building dictionary keyed by sourceip, destip, protocol, then updating counts and time for each packet
								then merge entries where src/dest == dest/src
					(2) add to dns history db - see below

		show tabulation from scan - idea is user will change filters based on this

		load files
			enter filters (perhaps based on the scan)
			select list of files
			for each file, load packets that pass the filter - keep loading all files into memory

		save packets in memory as a pcap file

		load filtered and save as a single operation - can be time consuming, want to be able to launch and walk away





	test datetime filters - data entry not working?


	other types of filters
		packet sequence number (simply the order in the file)
		protocol
		grouptype
			when would/could this be applied?
				group type is determined when packets load, but in a separate pass after all the packets are loaded
				want to have filters apply during packet load, to avoid having to do expensive gropu processing on bulks of packets that will be discarded based on simple mac or ip filters
				maybe ignore grouptype filters in the packet load pass, then apply the filters again during the group determinatino pass?
				add "GroupType" property to Packet - set to null until group determination pass is done


	window state management
		when load packet file, close packet viewer
		when apply filter, close packet viewer
		when close packet viewer, make it re-open when another packet is selected


	enhance load/save behavior
		append filter

	enable quick ways to add filters based on packets shown
		e.g. specialized label for ip4 address
			tooltip that shows the alias/raw version
			right-click command to add filteritem based on this item
		add up/down buttons on filteritems that can make them traverse filters - action would be to right-click an ip4, then use up/down buttons to move into place in filter list






	FIGURE OUT HOW TO HANDLE THE PACKET VIEWER WINDOW CLOSING - EITHER PREVENT IT, OR LET THE MAINWINDOW KNOW 


	packet viewer
		can make copy, which becomes another window, that will not be linked to main window any more
		color code portions of packet by iterating over headers 

	tcp stream view
		right click on tcp group opens separate window with stream view
		buttons to toggle stream 1 and stream 2
		button to toggle plain text view vs. hex dump view
		text box to indicate number of bytes to process from each stream (default 1000)
		window header to indicate
			src and dest ip4 and port
			total numbers of packest and bytes

	main window
		allow toggle between view by group and view by packet
			view by packet should be a datagrid, which can be sorted by sequence number, time, protocol, port, etc
			view by group should also be datagrid, which can be sorted by group type, time of first or last packet, etc.





	add http/https
	group tcp, http, https


	enhance filtering logic
		first finish up mac and ip4 based filtering, just to cut down size of files we work on
		then add excl/incl lists for other protocols
			arp
			icmp
			dns
			udp
			tcp
			http/https
		make the list be representalbe as a simple text file, so they can be exhanged with the linux c-based packet capture tool



perf analysis - is grouping logic still the hot spot?
	can just test by commenting out various groupings


augment headerdisplayinfo properties to highlight exceptional cases (errors, malformed data, truncated, incomplete groups, etc)
highlight message types, codes, options etc that we have not handled (yet)

additional cases to handle

	dns over tcp (see rfc 5966)
	dns malformed message types
		names too long (>255 per rfc 1035, or is there a higher limit now?)
		compressed name length fields with first two bits 10 or 01 (reserved per rfc 1035 section 4.1.4)
	dns query types not supported
	dns RR types not supported

	tcp incomplete sequences (missing start, missing end, missing in middle)
	http incomplete sequences (tcp incomplete, no dns source)
			
	tcp - variable length head and tail byte arrays



	add handling for IP4 fragments		

	handle IP4 "options" field

	look for comments in code







    // tcp group extensions
    //      profiling information
    //          each group should have a flag indicating whether it has been profiled yet
    //          do not profile until one of the profile properties is accessed
    //          profile items:
    //              flag no missing bytes in sequence numbering
    //              flag proper setup
    //              flag proper teardown
    //              flag RST termination - termination with a single RST is not strictly kosher but typical of browser behavior, per some web page
    //              flag RST followed by other traffic - this could be more problemmatic
    //              nunber of duplicate packets present
    //              number of packets data received out of order
    //              number of keep alives used
    //              duratin of keep alives
    //              number of retransmissions
    //              other characteristics that may signal problems
    // 






stages of loading a capture file

	0) load raw packets from file, parse all headers possible

	1) if parsing an ip header finds that this is a fragment, group with other ip datagram fragments
		- this is a special case because the result is treated as a single packet downstream
		- how to test?  --> use sample from Practical Packet Analysis
		- maybe this should happen automatically on reading the file
			- create dictionary of pointers to "agg packets" keyed by ip sequence number
			- the "agg packet" is a packet with the layer 2 and ip header information populated so it will look like a single packet downstream
			- for each new fragment, add the data to its "agg packet" (expanding the data array if necessary)
			- for each "agg packet" keep a list of "extents" which are pairs of (offset,length)
				- detect duplicate fragments
				- detect missing fragments
					- handle case where never see the fragment with MF=0, so don't know the full length
			- when a datagram is re-assembled, remove from dictionary, parse higher layer headers, and add to main packet list using max timestamp
			- report missing fragments 
		- make the aggregated datagram appear to be a single packet, using max of timestamps of fragments (that would be the time it is available to upstream)
		- flag to indicate whether missing fragments
		- pointer to list of raw packets (or drop the raw fragments??)


	2) group based on protocol

			- each protocol header has a method for incorporating a new packet into its groups
			- for each packet, look for the highest layer protocol and try the associated grouping function
				- eventually will add user options to control which protocols to group for
				- if that function returns false (indicating packet not accepted into group), notify user - this shoudl never happen

			- protocols that should be mutually exclusive of each others within same layer i.e., a packet belongs to one and only one of these protocols
			- this pass will result in a list of groups that are individual "conversations", e.g., an arp handshake, a udp sende/receiver pair or a tcp session
			- plus a list of ungrouped packets (if nothing else, due to protocols not handled yet)

			- properties of group list members:
				- "group protocol" - the protocol that is the basis for defining this group
					- from protocols enum 
					- but with another item for "ungrouped", to indicate ungrouped packets
				- group header
					- same type as regular protocol header, but only populated with the values that determine group membership
					- or null for "ungrouped"
				- first/last timestamp
				- completeness flag (? or shoudl this just be the result of a method?)
				- list of members (references to other groups or individual packets)


	2.5) groups within groups - not clear yet whether this will be necessary or useful


	3) have methods to test each group for 
			- completeness
			- corruption
			- anomalies












workflow, ui and backing data

	1) make loading a file a distinct operation, which parses all packets and puts them into a single list (and applies quickfilter, which will create a second list temporarily while i test it)
	2) application of packet sets creates a set of pointers into the master packet list
	3) doing the "group into convos" operation creates a list of convos *within each packet set*
		3.1) testing for convo membership is a method within each headerfield class
		3.2) (can make this an option later, initially we can just always group on all protocols that support it) user specifies which protocols to do convo testing for
		3.3) apply convo testing for lower level protocols first - so, say, IP4 gets defragged first, then tcp fragments get combined
			3.3.1) so that means each there will be a separate pass through the packets for each layer
				3.3.1.1) 
			3.3.2) 
		3.4) a convo is
			3.4.1) a special case of a packet
			3.4.2) one (or more??) of the packet header members will be populated with the common header information
			3.4.3) instead of data, there will be a list of pointers to member packets (Which can themselves be convos)
	4) display
		4.1) tree view of groups
		4.2) datagrid of groups
		4.3) datagrid of packets
		4.4) datagrid columns will be a select few columsn we will want to use for sorting, e.g., timestamps, macs, ip addresses and protocols
		4.5) the properties backing the DG columns will be properties at the packet level - protcol constructors will populate these packet-level properties when they construct the header	












timestamp value converter for display

hex data view for data portion of each packet (as detail view in datagrid?)

tool to summarize column of packet data grid with counts (sort by count, or by item value)
	difficulty is how to extract a list of the values of a certain field from setlist.sets.pkts
	the datagrid column can give the binding, which contains the headerfield path as a string
	is there a method that will automatically get the values in a datagrid column (try internet search - was not online when tried this)
	can reflection use the path string to access the properties of pkts?  (probably yes, but is it fast enough - see p. 781 of c# in a nutshell)


aggregate IP4 fragments
	handle dumps that do not include all fragments

add support for more protocols
	tcp
	udp
	icmp
	icmp router discovery (rfc 1256 - is this still current?)
	icmp other extensions

group "conversations"
	examples of conversations:
		arp request and response
		tcp session

	definition of a conversation:
		-
		-

	how a conversation should be presented in gui
		- allow for expand/collapse??

	how to handle incomplete conversation




handle IP4 "options" field




