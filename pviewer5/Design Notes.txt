

next:

	filter gui behaviors
		textbox editing behavior
			hitting enter tries to accept value
			invalid values make border glow red (thicker than default)
			if converter cannot return valid value, return "Invalid Value" so that shows up in tooltip

		text entry:
			mask and value display as ip4
			can accept decimal or hex input
			dot notation is required
				but tolerate missing elements 
					e.g., can enter 192.
					e.g., can enter 192...1
					missing bits filled with zeros
		tabs cycle through controls, including textboxes and combo in edit items, and add buttons
			but excluding teh up/down/delete buttons
		tabbing into a control puts it in edit mode
		tabbing out saves changes
		pressing enter saves changes
		going into edit mode selects all text
		text entry:
			mask and value display as ip4
			can accept decimal or hex input
			dot notation is required
				but tolerate missing elements 
					e.g., can enter 192.
					e.g., can enter 192...1
					missing bits filled with zeros



	FIGURE OUT HOW TO HANDLE THE PACKET VIEWER WINDOW CLOSING - EITHER PREVENT IT, OR LET THE MAINWINDOW KNOW 


	packet viewer
		can make copy, which becomes another window, that will not be linked to main window any more
		color code portions of packet by iterating over headers 

	tcp stream view
		right click on tcp group opens separate window with stream view
		buttons to toggle stream 1 and stream 2
		button to toggle plain text view vs. hex dump view
		text box to indicate number of bytes to process from each stream (default 1000)
		window header to indicate
			src and dest ip4 and port
			total numbers of packest and bytes

	main window
		allow toggle between view by group and view by packet
			view by packet should be a datagrid, which can be sorted by sequence number, time, protocol, port, etc
			view by group should also be datagrid, which can be sorted by group type, time of first or last packet, etc.
			
		filtering
			main window will have a "filterset", which will be a list of "filters", which in turn consist of "filteritems"
			brand new main window will have a filterset with one filter that will include all packets (otherwise, all packets would be excluded per the logic below)
			when a file is loaded, packets that do not pass the filterset will not even be loaded
			when MainWindow closes, trigger saves of all the filters, and save the list of filters with the stored window properties
			when MainWindow opens, load from list of saved filters and open FilterViews for each
			the packet CollectionView will be filtered based on the filterset, so if the filterset changes, the packet view will be re-filtered
				(this may be either automatic, or manually triggered with a "refresh" button, depending on how fast it is)
			filtersets can be saved/loaded to/from disk
			last filterset open will be saved in mainwindow properties
			logic for testing inclusion:
				packet will be tested against filters in order - the first one that matches determines the outcome
				each filter will have a flag for inclusion vs. exclusion
				if packet matches an exclusion filter , it is excluded
				if packet matches an inclusion filter , it is included
				else, packet is excluded
				==> in order for a filter to match a packet, it must match on ALL the filteritems within it - this iwll allow for logical and constraints

			types of filteritems
				ip4
				ip6
				mac
				protocol
				port
				timestamp
				grouptype
				includeall - always returns true for inclusion - this will be an easy way to say everything is includes unless specifically excluded
			filteritems will include a mask value, a test value and a relation (<, =, <> or >)
				the data type for mask and test value will depend on the filter type
				support mac and ip aliases


	add http/https
	group tcp, http, https


	enhance filtering logic
		first finish up mac and ip4 based filtering, just to cut down size of files we work on
		then add excl/incl lists for other protocols
			arp
			icmp
			dns
			udp
			tcp
			http/https
		make the list be representalbe as a simple text file, so they can be exhanged with the linux c-based packet capture tool



perf analysis - is grouping logic still the hot spot?
	can just test by commenting out various groupings


augment headerdisplayinfo properties to highlight exceptional cases (errors, malformed data, truncated, incomplete groups, etc)
highlight message types, codes, options etc that we have not handled (yet)

additional cases to handle

	dns over tcp (see rfc 5966)
	dns malformed message types
		names too long (>255 per rfc 1035, or is there a higher limit now?)
		compressed name length fields with first two bits 10 or 01 (reserved per rfc 1035 section 4.1.4)
	dns query types not supported
	dns RR types not supported

	tcp incomplete sequences (missing start, missing end, missing in middle)
	http incomplete sequences (tcp incomplete, no dns source)
			
	tcp - variable length head and tail byte arrays



	add handling for IP4 fragments		

	handle IP4 "options" field

	look for comments in code







    // tcp group extensions
    //      profiling information
    //          each group should have a flag indicating whether it has been profiled yet
    //          do not profile until one of the profile properties is accessed
    //          profile items:
    //              flag no missing bytes in sequence numbering
    //              flag proper setup
    //              flag proper teardown
    //              flag RST termination - termination with a single RST is not strictly kosher but typical of browser behavior, per some web page
    //              flag RST followed by other traffic - this could be more problemmatic
    //              nunber of duplicate packets present
    //              number of packets data received out of order
    //              number of keep alives used
    //              duratin of keep alives
    //              number of retransmissions
    //              other characteristics that may signal problems
    // 


	ipdnsmapper as separate solution
		prompt to open existing file at startup
		save file to disk after each pass through source packet files
		rename packet files after processing, not move them
		display - tree, sorted by ip4 (use a "view" to sort?)
		display - button to open separate dialog to search for a domain name
						- accept wildcards (regular expressions?)
						- return list of ips
		put dn lookup on separate thread
	collect list of unhandled cases







stages of loading a capture file

	0) load raw packets from file, parse all headers possible

	1) if parsing an ip header finds that this is a fragment, group with other ip datagram fragments
		- this is a special case because the result is treated as a single packet downstream
		- how to test?  --> use sample from Practical Packet Analysis
		- maybe this should happen automatically on reading the file
			- create dictionary of pointers to "agg packets" keyed by ip sequence number
			- the "agg packet" is a packet with the layer 2 and ip header information populated so it will look like a single packet downstream
			- for each new fragment, add the data to its "agg packet" (expanding the data array if necessary)
			- for each "agg packet" keep a list of "extents" which are pairs of (offset,length)
				- detect duplicate fragments
				- detect missing fragments
					- handle case where never see the fragment with MF=0, so don't know the full length
			- when a datagram is re-assembled, remove from dictionary, parse higher layer headers, and add to main packet list using max timestamp
			- report missing fragments 
		- make the aggregated datagram appear to be a single packet, using max of timestamps of fragments (that would be the time it is available to upstream)
		- flag to indicate whether missing fragments
		- pointer to list of raw packets (or drop the raw fragments??)


	2) group based on protocol

			- each protocol header has a method for incorporating a new packet into its groups
			- for each packet, look for the highest layer protocol and try the associated grouping function
				- eventually will add user options to control which protocols to group for
				- if that function returns false (indicating packet not accepted into group), notify user - this shoudl never happen

			- protocols that should be mutually exclusive of each others within same layer i.e., a packet belongs to one and only one of these protocols
			- this pass will result in a list of groups that are individual "conversations", e.g., an arp handshake, a udp sende/receiver pair or a tcp session
			- plus a list of ungrouped packets (if nothing else, due to protocols not handled yet)

			- properties of group list members:
				- "group protocol" - the protocol that is the basis for defining this group
					- from protocols enum 
					- but with another item for "ungrouped", to indicate ungrouped packets
				- group header
					- same type as regular protocol header, but only populated with the values that determine group membership
					- or null for "ungrouped"
				- first/last timestamp
				- completeness flag (? or shoudl this just be the result of a method?)
				- list of members (references to other groups or individual packets)


	2.5) groups within groups - not clear yet whether this will be necessary or useful


	3) have methods to test each group for 
			- completeness
			- corruption
			- anomalies












workflow, ui and backing data

	1) make loading a file a distinct operation, which parses all packets and puts them into a single list (and applies quickfilter, which will create a second list temporarily while i test it)
	2) application of packet sets creates a set of pointers into the master packet list
	3) doing the "group into convos" operation creates a list of convos *within each packet set*
		3.1) testing for convo membership is a method within each headerfield class
		3.2) (can make this an option later, initially we can just always group on all protocols that support it) user specifies which protocols to do convo testing for
		3.3) apply convo testing for lower level protocols first - so, say, IP4 gets defragged first, then tcp fragments get combined
			3.3.1) so that means each there will be a separate pass through the packets for each layer
				3.3.1.1) 
			3.3.2) 
		3.4) a convo is
			3.4.1) a special case of a packet
			3.4.2) one (or more??) of the packet header members will be populated with the common header information
			3.4.3) instead of data, there will be a list of pointers to member packets (Which can themselves be convos)
	4) display
		4.1) tree view of groups
		4.2) datagrid of groups
		4.3) datagrid of packets
		4.4) datagrid columns will be a select few columsn we will want to use for sorting, e.g., timestamps, macs, ip addresses and protocols
		4.5) the properties backing the DG columns will be properties at the packet level - protcol constructors will populate these packet-level properties when they construct the header	













git - how to roll back????
    - how to open a branch to an earlier version so i can just look at how it used to work


timestamp value converter for display

hex data view for data portion of each packet (as detail view in datagrid?)

tool to summarize column of packet data grid with counts (sort by count, or by item value)
	difficulty is how to extract a list of the values of a certain field from setlist.sets.pkts
	the datagrid column can give the binding, which contains the headerfield path as a string
	is there a method that will automatically get the values in a datagrid column (try internet search - was not online when tried this)
	can reflection use the path string to access the properties of pkts?  (probably yes, but is it fast enough - see p. 781 of c# in a nutshell)


aggregate IP4 fragments
	handle dumps that do not include all fragments

add support for more protocols
	tcp
	udp
	icmp
	icmp router discovery (rfc 1256 - is this still current?)
	icmp other extensions

group "conversations"
	examples of conversations:
		arp request and response
		tcp session

	definition of a conversation:
		-
		-

	how a conversation should be presented in gui
		- allow for expand/collapse??

	how to handle incomplete conversation





remove (or comment out) facility to view packets excluded via quickfilter
	separate datagrid
	qfexcluded packet set in mainwindow
	logic in file read method that puts an "excluded" packet into separate packet set


handle IP4 "options" field


quickfilters
	test performance - if too slow, try optimizing by
		ordering filters
		structuring into dictionaries (one dict for each mask value) using comparevalue as the key

	maybe also add other criteria, like ether type/len field (to exclude ipv6 noise, for example)

	dialog improvements
		checkboxes to toggle aliasing of mac/ip addresses
		drag and drop
		add/delete row respect multi selections






