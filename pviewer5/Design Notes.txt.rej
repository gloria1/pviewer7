diff a/pviewer5/Design Notes.txt b/pviewer5/Design Notes.txt	(rejected hunks)
@@ -2,15 +2,195 @@
 
 	TO DO
 
-	re-check file load/save logic
-	append logic needs to handle duplicate entries - notify user, show dups in messagebox
 
-	copy new table/item logic to mac
-	copy file logic to mac
+		ADDED FROM MS CODE EDITING THE PVIEWER7 FOLDER AS A GIT REPO
+			next steps - not sure which order to pursue these
+				0) check that filtering logic is working after H/G refactoring
+				1) check that alias/iphex toggles refresh view correctly
+				2) finish exception level logic
+				3) finish DHS database logic
+				4) add logic to read multiple pcap files
+				5) add logic to store filtered packet set
+				6) use scenario is to 
+					- read the set of cap files from sheraton recnetly (or some other)
+					- set up a filter interactively
+					- store the filtered set of packets in a new file
+		END ADDITION FROM MS CODE
+
+		
+
+		bookmark
+
+			review protocol-specific H and G logic
+				proper displayinfo logic - put in tests that will create exception level >0 for testing
+				logic for exception level - set to 0 for known good cases
+			then add filtering logic
+			update xaml
+				
+
+
+
+
+		add IP6 support now???
+		NO, NOT YET
+			add struct for IP6, same operators as IP4
+				store address as 2 longs (for space efficiency if/when we get to a point of having lots of IP6 objects)
+
+			a class (or struct?) for IP, of which IP4 and IP6 are subclasses?
+				structs do not support inheritance - what does this mean?
+
+
+
+		augment displayinfo for RR's - useful in debugging when viewing Locals
+
+
+
+		add general logic for filtering view based on "exception level"
+			exception level is determined at the header, packet and group level
+			show exception level in displayinfo if > 0
+			packet exception level is max (levels of its headers, level of packet itself)
+			group exception level is based on the group
+			if group has except level >0, show all packets in group
+			==> use Packet.parent property to determine Packet.Visible (rename the "FilterMatched" property to "Visible")
+
+
+
+
+
+
+		augment displayinfo for DNSH
+			what are the "typical" forms
+				query
+				"typical" answer - one line summary should just show the first IP4 returned
+					start with simple definition of "normal" fingerprint, can add more as we observe
+						"normal" seems to have these characteristics: (at least for traffic between a LAN client and the local DNS server on that LAN)
+							two packets, one query, one response
+							response RRs include only
+								query packet, query section has only one RR
+								response packet
+									query section has only one RR
+									answer section - A RRs and CNAME RRs
+										CNAME records provide CNAME for name in prior RR
+									ns authority section - zero or more NS RR, relating to the domain in the query
+									additional records section - A or AAAA records for the nameservers in the ns auth section
+				"unusual" - neither of the first two
+		augment display info for DNSG - flag types other than the typical Q&A
+			typical group characteristics
+				one query with one RR
+				one answer that is "typical" (see above)
+
+
+				
+
+		data structure for ip-dns map
+			what do we want it to do?
+				allow searches of all-domains-for-a-given-ip and all-ips-for-a-given-domain
+				allow efficient filtering based on a domain
+					e.g., i want to say "include/exclude *.domain.com"
+						==> need to rapidly look up whether an ip4 or ip6 relates to *.domain.com
+							==> rapid, high volume lookups will be keyed by ip4/ip6
+								==> dict keyed by ip
+									==> need generic class for ip address, of which ip4 and ip6 are sub-classes
+
+
+
+
+
+		add command to append a new capture file to ones already loaded
+
+		enhance dns header one-line display info per notes below
+
+		enable feeding of ip-dns map
+
+		enable gui display of ip-dns map
+
+		make gui highlight cases where multiple IPs for same domain
+		also highlight cases where mutiple domains for same IP
+
+		add ip-dns map info to IP4 tooltip display
+
+		enable storage and retrieval of map - so it can grow over sessions
+
+
+
+
+		dns
+			enhancements
+				additional info in DNSH pvdisplayinfo
+					abbreviated info on packet sufficient to identify
+					"usual" and ""unusual" packet sequences
+						what is that?
+							dns type (qustion or response)
+							dns flags - recursion at least
+							list of rr types
+							no rrdata
+
+				additional information in displayinfo for RRs
+					type (number and name)
+					class
+					TTL
+					RDATA - formatted accordingly for each type
+				make filter for dns values i haven't leanred how to handle
+					class other than internet
+
+
+				throw dialog after packet file load if un-grocked dns records were loaded
+					maintain a dictionary of <protocol, List<string>>
+					header parsers can add exception info and pvdisplay info to list
+					when file load done, open non-modal window if the dict is not empty
+					dict window allows close and simple clear of the dictionary
+
+					set some kind of "exception flag" that gets passed up the header parse stack
+					and puts up a message box
+				
+				rdns crawler - read tcp/ip illustrated vol1, starting in section 11.5.6.4 (page 516)
+
+
+			must also handle dns over tcp see rfc 5966
+			set up dns server on windows?  or on pfsense?
+				can it make outbound dns requests encrypted?
+				can it make outbound dns requests go to some non-google, non-verizon server?
+
+
+
+
+
+	ip-dn mapping
+		data elements - list of idmtableitem
+			ip
+			domains - list of idmdomain
+				domain name
+				time first observed
+				time last observed
+				obtained from RDNS or from reading DNS packets?
+				list of dns servers that provided this name
+				other information TBD that is worth capturing
+
+		operations
+			rdns update
+			"contribute ip" - method called by ip4 header constructor, to add the ip4 address to the table
+			"contribute dns" - method called by dns header reader, to add its information
+				IMPLEMENT BY TRACING DNS HEADER READING CODE
+				DISCOVER VARIATIONS IN WHAT KINDS OF DNS INFO COMES IN
+					WHILE AT HOME
+					WHILE IN WORK NETWORK
+					WHILE ON IPHONE NETWORK
+			file merge - merges info within records
+			scan for noteworthy situations
+				situations to flag
+					ip for a domain changes over time (don't know how much of an anomaly this is, but anomaly or not, i want to observe ip addresses changing.....)
+					ip addresses with no known domain name (use RDNS either on background thread or trigggered manually)
+		validator/converters
+			add dns entries to ip tostringalts
+			dlist
+				main display is list of domains
+				tooltip shows expanded info on each
+				
 
 
 	datetime converters seem busted
 
+
 			
 
 	window layout
